import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Expense } from '@/data/types';
import { useToast } from '@/components/ui/use-toast';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { usePdfExport } from '@/hooks/usePdfExport';
import { useLocalStorage } from '@/hooks/useLocalStorage';
import { Download, Share2, Copy, FileText, Settings2 } from 'lucide-react';

interface SharedExpenseProps {
  expenses: Expense[];
}

const SharedExpense: React.FC<SharedExpenseProps> = ({ expenses }) => {
  const [selectedExpenses, setSelectedExpenses] = useState<Expense[]>(expenses);
  const [userProfile] = useLocalStorage('userProfile', { name: 'User', email: '', phone: '' });
  const { toast } = useToast();
  const { exportToPdf, isExporting } = usePdfExport();
  
  const handleShare = (method: 'whatsapp' | 'email' | 'copy') => {
    if (selectedExpenses.length === 0) {
      toast({
        title: "No expenses selected",
        description: "Please select at least one expense to share",
        variant: "destructive",
      });
      return;
    }
    
    const total = selectedExpenses.reduce((sum, expense) => sum + expense.amount, 0);
    
    let message = `My Expense Summary (₹${total.toLocaleString('en-IN')})\n\n`;
    message += `Generated by: ${userProfile.name || 'User'}\n\n`;
    
    selectedExpenses.forEach(expense => {
      const date = new Date(expense.date).toLocaleDateString('en-IN');
      message += `${date} - ${expense.category}: ₹${expense.amount} ${expense.description ? `(${expense.description})` : ''}\n`;
    });
    
    switch (method) {
      case 'whatsapp':
        const encodedMessage = encodeURIComponent(message);
        window.open(`https://wa.me/?text=${encodedMessage}`, '_blank');
        toast({
          title: "WhatsApp Share",
          description: "Opening WhatsApp to share your expense summary",
        });
        break;
      case 'email':
        const subject = encodeURIComponent('My Expense Summary');
        const body = encodeURIComponent(message);
        window.open(`mailto:?subject=${subject}&body=${body}`, '_blank');
        toast({
          title: "Email Share",
          description: "Opening your email client to share expenses",
        });
        break;
      case 'copy':
        navigator.clipboard.writeText(message);
        toast({
          title: "Copied to clipboard",
          description: "You can now paste the expense summary",
        });
        break;
    }
  };
  
  const generatePDF = () => {
    if (selectedExpenses.length === 0) {
      toast({
        title: "No expenses selected",
        description: "Please select at least one expense to download",
        variant: "destructive",
      });
      return;
    }
    
    exportToPdf('My Dinner Expense Report', {
      userName: userProfile.name || 'User',
    });
  };
  
  return (
    <Card className="transform transition-all duration-300 hover:shadow-lg card-3d">
      <CardHeader className="bg-gradient-to-r from-food-orange/10 to-food-yellow/10 rounded-t-lg">
        <CardTitle className="text-lg font-medium flex items-center gap-2">
          <Share2 className="h-5 w-5 text-food-orange" />
          Share & Download
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
          <Button 
            variant="outline"
            className="flex flex-col items-center p-4 h-auto space-y-2 transition-transform duration-300 hover:scale-105 hover:border-food-green hover:shadow-md"
            onClick={() => handleShare('whatsapp')}
          >
            <div className="w-10 h-10 rounded-full bg-[#25D366] flex items-center justify-center text-white mb-1 shadow-md transform transition-transform hover:rotate-12">
              <svg viewBox="0 0 24 24" width="20" height="20" stroke="currentColor" fill="none" strokeWidth="2">
                <path d="M3 21l1.65-3.8a9 9 0 1 1 3.4 2.9L3 21"/>
                <path d="M9 10a1 1 0 0 0 1 1m8-1a5 5 0 0 1-5 5"/>
              </svg>
            </div>
            <span>WhatsApp</span>
          </Button>
          
          <Button 
            variant="outline"
            className="flex flex-col items-center p-4 h-auto space-y-2 transition-transform duration-300 hover:scale-105 hover:border-food-blue hover:shadow-md"
            onClick={() => handleShare('email')}
          >
            <div className="w-10 h-10 rounded-full bg-[#D44638] flex items-center justify-center text-white mb-1 shadow-md transform transition-transform hover:rotate-12">
              <svg viewBox="0 0 24 24" width="20" height="20" stroke="currentColor" fill="none" strokeWidth="2">
                <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"/>
                <polyline points="22,6 12,13 2,6"/>
              </svg>
            </div>
            <span>Email</span>
          </Button>
          
          <Button 
            variant="outline"
            className="flex flex-col items-center p-4 h-auto space-y-2 transition-transform duration-300 hover:scale-105 hover:border-food-orange hover:shadow-md"
            onClick={() => handleShare('copy')}
          >
            <div className="w-10 h-10 rounded-full bg-[#6C63FF] flex items-center justify-center text-white mb-1 shadow-md transform transition-transform hover:rotate-12">
              <Copy className="h-5 w-5" />
            </div>
            <span>Copy Text</span>
          </Button>
          
          <Button 
            variant="outline"
            className="flex flex-col items-center p-4 h-auto space-y-2 transition-transform duration-300 hover:scale-105 hover:border-food-yellow hover:shadow-md animate-pulse-slow"
            onClick={generatePDF}
            disabled={isExporting}
          >
            <div className="w-10 h-10 rounded-full bg-[#FF5722] flex items-center justify-center text-white mb-1 shadow-md transform transition-transform hover:rotate-12">
              <FileText className="h-5 w-5" />
            </div>
            <span>{isExporting ? "Generating..." : "PDF"}</span>
          </Button>
        </div>
        
        <Dialog>
          <DialogTrigger asChild>
            <Button variant="ghost" size="sm" className="w-full mt-2 flex items-center justify-center gap-2 hover:bg-food-orange/10 transition-colors">
              <Settings2 className="h-4 w-4" />
              Advanced Options
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-md animate-scale-in">
            <DialogHeader>
              <DialogTitle>Export Options</DialogTitle>
              <DialogDescription>
                Customize your export settings for better results
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <Label>Date Range</Label>
                <div className="grid grid-cols-2 gap-2">
                  <div>
                    <Label htmlFor="start-date" className="text-xs">Start Date</Label>
                    <Input 
                      id="start-date"
                      type="date"
                      className="transition-all duration-200 hover:border-food-orange"
                    />
                  </div>
                  <div>
                    <Label htmlFor="end-date" className="text-xs">End Date</Label>
                    <Input 
                      id="end-date"
                      type="date"
                      className="transition-all duration-200 hover:border-food-orange"
                    />
                  </div>
                </div>
              </div>
              <div className="space-y-2">
                <Label>Export Format</Label>
                <div className="grid grid-cols-2 gap-2">
                  <Button 
                    variant="outline"
                    onClick={generatePDF}
                    className="w-full flex items-center gap-2 transition-all duration-200 hover:bg-food-orange hover:text-white"
                    disabled={isExporting}
                  >
                    <FileText className="h-4 w-4" />
                    {isExporting ? "Generating..." : "PDF"}
                  </Button>
                  <Button 
                    variant="outline"
                    onClick={() => {
                      // For CSV implementation
                      toast({
                        title: "CSV Export",
                        description: "This feature will be available in future updates",
                      });
                    }}
                    className="w-full flex items-center gap-2"
                  >
                    <Download className="h-4 w-4" />
                    CSV
                  </Button>
                </div>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </CardContent>
    </Card>
  );
};

export default SharedExpense;
